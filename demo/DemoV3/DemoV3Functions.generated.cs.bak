using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

using DemoV3.Model;
using Demov3.Errors;

namespace DemoV3
{
    /// AUTO GENERATED CLASS
    public class DemoV3Functions
    {
        private readonly ILogger<DemoV3Functions> _logger;
        private readonly IDemoV3ServiceFactory _service;
        public DemoV3Functions(ILogger<DemoV3Functions> logger, IDemoV3ServiceFactory service) {
            _logger = logger;
            _service = service;
        }
        /// <summary>
        /// auto-generated function invocation.
        ///</summary>
        [FunctionName("UsersGetAsync")]
        public async Task<IActionResult> UsersGetAsync(
            [HttpTrigger(AuthorizationLevel.Function, "get", Route = "users")]
            HttpRequest request)
        {
            try {
                var result = await _service.Instance(request).UsersGetAsync();
                return new JsonResult(result) {StatusCode = 200, SerializerSettings = _service.ResponseSerializerSettings };
            } catch(CaffoaClientError err) {
                return err.Result;
            } catch (Exception e) {
                LogException(e, request, "UsersGetAsync", "users", "get");
		        throw;
            }
        }

        /// <summary>
        /// auto-generated function invocation.
        ///</summary>
        [FunctionName("UserPostAsync")]
        public async Task<IActionResult> UserPostAsync(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "users")]
            HttpRequest request)
        {
            try {
                var jObject = await ParseJson<JObject>(request.Body);
                var discriminator = jObject["type"]?.ToString();
                var result =  discriminator switch
                {
                    "simple" => await _service.Instance(request).UserPostAsync(ToObject<User>(jObject)),
					"guest" => await _service.Instance(request).UserPostAsync(ToObject<GuestUser>(jObject)),
                    _ => throw CaffoaJsonParseError.WrongContent("type", discriminator, new [] { "simple", "guest" })
                };

                return new JsonResult(result) {StatusCode = 201, SerializerSettings = _service.ResponseSerializerSettings };
            } catch(CaffoaClientError err) {
                return err.Result;
            } catch (Exception e) {
                LogException(e, request, "UserPostAsync", "users", "post");
		        throw;
            }
        }

        /// <summary>
        /// auto-generated function invocation.
        ///</summary>
        [FunctionName("UserPutAsync")]
        public async Task<IActionResult> UserPutAsync(
            [HttpTrigger(AuthorizationLevel.Function, "put", Route = "users/{userId}")]
            HttpRequest request, string userId)
        {
            try {
                var jObject = await ParseJson<JObject>(request.Body);
                var discriminator = jObject["type"]?.ToString();
                var (result, code) =  discriminator switch
                {
                    "simple" => await _service.Instance(request).UserPutAsync(userId, ToObject<User>(jObject)),
					"guest" => await _service.Instance(request).UserPutAsync(userId, ToObject<GuestUser>(jObject)),
                    _ => throw CaffoaJsonParseError.WrongContent("type", discriminator, new [] { "simple", "guest" })
                };

                return new JsonResult(result) {StatusCode = code, SerializerSettings = _service.ResponseSerializerSettings  };
            } catch(CaffoaClientError err) {
                return err.Result;
            } catch (Exception e) {
                LogException(e, request, "UserPutAsync", "users/{userId}", "put", ("userId", userId));
		        throw;
            }
        }

        /// <summary>
        /// auto-generated function invocation.
        ///</summary>
        [FunctionName("UserPatchAsync")]
        public async Task<IActionResult> UserPatchAsync(
            [HttpTrigger(AuthorizationLevel.Function, "patch", Route = "users/{userId}")]
            HttpRequest request, string userId)
        {
            try {
                var result = await _service.Instance(request).UserPatchAsync(userId, await ParseJson<JObject>(request.Body));
                return new JsonResult(result) {StatusCode = 200, SerializerSettings = _service.ResponseSerializerSettings };
            } catch(CaffoaClientError err) {
                return err.Result;
            } catch (Exception e) {
                LogException(e, request, "UserPatchAsync", "users/{userId}", "patch", ("userId", userId));
		        throw;
            }
        }

        /// <summary>
        /// auto-generated function invocation.
        ///</summary>
        [FunctionName("UserGetAsync")]
        public async Task<IActionResult> UserGetAsync(
            [HttpTrigger(AuthorizationLevel.Function, "get", Route = "users/{userId}")]
            HttpRequest request, string userId)
        {
            try {
                var result = await _service.Instance(request).UserGetAsync(userId);
                return new JsonResult(result) {StatusCode = 200, SerializerSettings = _service.ResponseSerializerSettings };
            } catch(CaffoaClientError err) {
                return err.Result;
            } catch (Exception e) {
                LogException(e, request, "UserGetAsync", "users/{userId}", "get", ("userId", userId));
		        throw;
            }
        }
        public async Task<T> ParseJson<T>(Stream s)
        {
            string requestBody = String.Empty;
            using (StreamReader streamReader =  new  StreamReader(s))
                requestBody = await streamReader.ReadToEndAsync();
            if (string.IsNullOrWhiteSpace(requestBody))
                throw CaffoaJsonParseError.NoContent();
            try {
                return JsonConvert.DeserializeObject<T>(requestBody);
            } catch (Exception e) {
                throw CaffoaJsonParseError.FromException(e);
            }
        }

        public T ToObject<T>(JObject jObject)
        {
            try {
                return jObject.ToObject<T>();
            } catch (Exception e) {
                throw CaffoaJsonParseError.FromException(e);
            }
        }

        public void LogException(Exception e, HttpRequest request, string functionName, string route, string operation,
            params (string, object)[] namedParams)
        {
            var debugInformation = new Dictionary<string,  string>();
            debugInformation["Error"] = e.Message;
            debugInformation["ExecptionType"] = e.GetType().Name;
            debugInformation["FunctionName"] = functionName;
            debugInformation["Route"] = route;
            debugInformation["Operation"] = operation;
            foreach (var (name,value) in namedParams)
            {
                debugInformation["p_" + name] = value.ToString();
            }
            debugInformation["Payload"] = GetPayloadForExceptionLogging(request);
            _logger.LogCritical(JsonConvert.SerializeObject(debugInformation));
        }

        private static string GetPayloadForExceptionLogging(HttpRequest req)
        {
	        try
	        {
		        if (req.ContentLength == 0)
                    return "no payload";

                using var ms = new MemoryStream();
                req.Body.CopyTo(ms);
                return Convert.ToBase64String(ms.ToArray());
	        }
	        catch (Exception e)
	        {
		        return "error while reading payload: " + e.Message;
	        }
        }
    }
}