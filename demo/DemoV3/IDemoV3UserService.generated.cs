using System;
using System.IO;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using DemoV3.Model.Base;
using DemoV3.Model;

namespace DemoV3
{
    /// AUTOGENERATED BY caffoa
    /// <summary>
    /// Interface for services to be implemented to serve the Function implementation
    /// </summary>
    public interface IDemoV3UserService : IAsyncDisposable
    {
        /// <summary>
        /// get information about the users
        /// 200 -> return user object
        /// 400 -> Error
        /// </summary>
        Task<IEnumerable<AnyCompleteUser>> UsersGetAsync(int offset = 0, int limit = 1000);

        /// <summary>
        /// create or update a user without return test
        /// 201 -> User was created
        /// </summary>
        Task<IEnumerable<AnyCompleteUser>> UserPostAsync(User payload);

        /// <summary>
        /// create or update a user without return test
        /// 201 -> User was created
        /// </summary>
        Task<IEnumerable<AnyCompleteUser>> UserPostAsync(GuestUser payload);

        /// <summary>
        /// create or update a user
        /// 200 -> User was updated
        /// 201 -> User was created
        /// </summary>
        Task<(AnyCompleteUser, int)> UserPutAsync(string userId, User payload);

        /// <summary>
        /// create or update a user
        /// 200 -> User was updated
        /// 201 -> User was created
        /// </summary>
        Task<(AnyCompleteUser, int)> UserPutAsync(string userId, GuestUser payload);

        /// <summary>
        /// update a user
        /// 200 -> User was updated
        /// </summary>
        Task<UserWithId> UserPatchAsync(string userId, JObject payload);

        /// <summary>
        /// get information about the users
        /// 200 -> return user object
        /// </summary>
        Task<UserWithId> UserGetAsync(string userId);

        /// <summary>
        /// 201 -> Image was created
        /// </summary>
        Task UploadImageAsync(string userId, Stream stream);

        /// <summary>
        /// get
        /// 200 -> return user object
        /// 400 -> Error
        /// </summary>
        Task<IEnumerable<User>> UsersGetByBirthdateAsync(DateOnly date);

        /// <summary>
        /// get
        /// 200 -> return user object
        /// 400 -> Error
        /// </summary>
        Task<IEnumerable<User>> UsersSearchByDateAsync(DateOnly before, DateOnly after, int? maxResults = null);

        /// <summary>
        /// 200 -> list of elements that have the requested tag
        /// </summary>
        Task<TagInfos> GetTagsAsync();

        /// <summary>
        /// 200 -> tags for the user
        /// </summary>
        Task<IEnumerable<KeyValuePair<string, IEnumerable<Guid>>>> GetUserTagsAsync();

    }
}
