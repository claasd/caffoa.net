openapi: "3.0.2"
info:
  title: Demo API
  version: "1.0"


components:
  schemas:
    fancyString:
      type: string
      description: A fancy string with description
    
    error:
      type: object
      properties:
        status:
          type: string
          description: Single string based code describing the error.
        message:
          type: string
          description: Human readable error message.
      required:
        - status
        - message

    user:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/fancyString"
        address:
          $ref: "base.openapi.yml#/components/schemas/address"
        birthdate:
          type: string
          format: date
          nullable: true
        emails:
          type: array
          items:
            type: string
        descriptions:
          additionalProperties:
            $ref: "#/components/schemas/fancyString"
        type:
          type: string
          enum: [ simple ]
          default: simple
        ageGroup:
          type: integer
          enum: [ 18,40,70,120 ]
          nullable: true
          default: 40
        preferredContactTime:
          type: string
          format: time
          default: "12:00"

      required:
        - type
        - name

    guestUser:
      type: object
      properties:
        email:
          type: string
          format: email
        type:
          type: string
          enum: [ guest ]
          default: guest
      required:
        - type
        - email

    userWithId:
      allOf:
        - $ref: "#/components/schemas/user"
        - type: object
          properties:
            id:
              type: string
            registrationDate:
              type: string
              format: date-time

    anyUser:
      oneOf:
        - $ref: "#/components/schemas/user"
        - $ref: "#/components/schemas/guestUser"
      discriminator:
        propertyName: type
        mapping:
          simple: "#/components/schemas/user"
          guest: "#/components/schemas/guestUser"
      required:
        - type

    anyCompleteUser:
      oneOf:
        - $ref: "#/components/schemas/userWithId"
        - $ref: "#/components/schemas/guestUser"
      discriminator:
        propertyName: type
        mapping:
          simple: "#/components/schemas/userWithId"
          guest: "#/components/schemas/guestUser"
      required:
        - type


    pricing:
      type: object
      properties:
        price:
          type: number
          enum:
            - 32.99
            - 33.99
            - 44.99
          nullable: true
        taxes:
          type: object
          additionalProperties:
            description: "List of taxes for different country-codes"
            format: double
            type: number
          example:
            "DE": 19.0
            "AT": 19.0
    longRunningfunctionStatus:
      type: object
      properties: 
        status:
          type: string
          enum:
            - running
            - success
            - failure
        result:
          $ref: "#/components/schemas/anyUser"
  responses:
    error:
      description: Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
paths:
  "/users":
    get:
      parameters:
        - name: offset
          schema:
            type: integer
            default: 0
          required: false
          in: query
        - name: limit
          schema:
            type: integer
            default: 1000
          required: false
          in: query
      tags:
        - user
      operationId: users-get
      description: get information about the users
      responses:
        "200":
          description: return user object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/anyCompleteUser"
        "400":
          $ref: "#/components/responses/error"
    
    post:
      tags:
        - user
      operationId: user-post
      description: create or update a user without return test
      requestBody:
        description: a full user
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/user"
                - $ref: "#/components/schemas/guestUser"
              discriminator:
                propertyName: type
                mapping:
                  simple: "#/components/schemas/user"
                  guest: "#/components/schemas/guestUser"
      responses:
        "201":
          description: User was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/anyCompleteUser"
  "/users/{userId}":
    parameters:
      - name: userId
        in: path
        required: true
        description: the user id.
        schema:
          type: string

    put:
      tags:
        - user
      operationId: user-put
      description: create or update a user
      requestBody:
        description: a full user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/anyUser"

      responses:
        "200":
          description: User was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/anyCompleteUser"
        "201":
          description: User was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/anyCompleteUser"

    patch:
      tags:
        - user
      operationId: user-patch
      description: update a user
      requestBody:
        description: a full user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"

      responses:
        "200":
          description: User was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userWithId"
    get:
      tags:
        - user
      operationId: user-get
      description: get information about the users
      responses:
        "200":
          description: return user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userWithId"

  "/users/born-before/{date}":
    parameters:
      - name: date
        schema:
          type: string
          format: date
        in: path
        required: true
    
    get:
      tags:
        - user
      operationId: users.get.by.birthdate
      description: get
      responses:
        "200":
          description: return user object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/error"

  "/users/filter/byAge":
    parameters:
      - name: before
        schema:
          type: string
          format: date
        in: query
        required: true
      - name: after
        schema:
          type: string
          format: date
          default: "1950-01-01"
        in: query
        required: true
      - name: maxResults
        schema:
          type: integer
        required: false
        in: query
    
    get:
      tags:
        - user
      operationId: users-search-by-date
      description: get
      responses:
        "200":
          description: return user object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/error"
  
  /startLongRunningFunction/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags: 
        - maintainance
      operationId: long-running-function
      description: start a long running function via durable functions
      responses:
        202:
          description: started long running function
          content: 
            'application/json':
              schema:
                $ref: "#/components/schemas/longRunningfunctionStatus"
      
  