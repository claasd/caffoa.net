openapi: 3.0.1
info:
  title: Demo API
  version: '1.0'
paths:
  /users:
    get:
      tags:
        - user
        - testTag
        - otherTag
      description: get information about the users
      operationId: users-get
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 1000
      responses:
        '200':
          description: return user object
          content:
            application/json: { }
        '400':
          description: Error
          content:
            application/json: { }
    post:
      tags:
        - user
      description: create or update a user without return test
      operationId: user-post
      requestBody:
        description: a full user
        content:
          application/json: { }
      responses:
        '201':
          description: User was created
          content:
            application/json: { }
  '/users/{userId}':
    put:
      tags:
        - user
      description: create or update a user
      operationId: user-put
      requestBody:
        description: a full user
        content:
          application/json: { }
      responses:
        '200':
          description: User was updated
          content:
            application/json: { }
        '201':
          description: User was created
          content:
            application/json: { }
    patch:
      tags:
        - user
      description: update a user
      operationId: user-patch
      requestBody:
        description: a full user
        content:
          application/json: { }
      responses:
        '200':
          description: User was updated
          content:
            application/json: { }
    get:
      tags:
        - user
      description: get information about the users
      operationId: user-get
      responses:
        '200':
          description: return user object
          content:
            application/json: { }
    parameters:
      - name: userId
        in: path
        description: the user id.
        required: true
        schema:
          type: string
  '/users/{userId}/uploadImage':
    post:
      tags:
        - user
      operationId: upload-image
      requestBody:
        content:
          multipart/form-data: { }
      responses:
        '201':
          description: Image was created
    parameters:
      - name: userId
        in: path
        description: the user id.
        required: true
        schema:
          type: string
  '/users/born-before/{date}':
    get:
      tags:
        - user
      description: get
      operationId: users.get.by.birthdate
      responses:
        '200':
          description: return user object
          content:
            application/json: { }
        '400':
          description: Error
          content:
            application/json: { }
    parameters:
      - name: date
        in: path
        required: true
        schema:
          type: string
          format: date
  /users/filter/byAge:
    get:
      tags:
        - user
      description: get
      operationId: users-search-by-date
      responses:
        '200':
          description: return user object
          content:
            application/json: { }
        '400':
          description: Error
          content:
            application/json: { }
    parameters:
      - name: before
        in: query
        required: true
        schema:
          type: string
          format: date
      - name: after
        in: query
        required: true
        schema:
          type: string
          format: date
          default: '1950-01-01'
      - name: maxResults
        in: query
        schema:
          type: integer
          nullable: true
  '/startLongRunningFunction/{id}':
    post:
      tags:
        - maintainance
      description: start a long running function via durable functions
      operationId: long-running-function
      responses:
        '202':
          description: started long running function
          content:
            application/json: { }
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
  /tags:
    get:
      tags:
        - user
      operationId: get-tags
      responses:
        '200':
          description: list of elements that have the requested tag
          content:
            application/json: { }
  /tags/users:
    get:
      tags:
        - user
      operationId: get-user-tags
      responses:
        '200':
          description: tags for the user
          content:
            application/json: { }
  /enums/list:
    get:
      tags:
        - user
      operationId: listEnums
      responses:
        '200':
          description: a list of neum
          content:
            application/json: { }
    parameters:
      - name: filter
        in: query
        schema:
          enum:
            - enum1
            - enum2
            - enum space
            - enum-sepcial_CHARS
            - deprecated_enum
          type: string
          x-caffoa-enum-aliases:
            deprecated_enum: enum1
            deprecated_enum2: enum2
      - name: include
        in: query
        schema:
          type: array
          items:
            enum:
              - enum1
              - enum2
              - enum space
              - enum-sepcial_CHARS
              - deprecated_enum
            type: string
            x-caffoa-enum-aliases:
              deprecated_enum: enum1
              deprecated_enum2: enum2
          nullable: true
      - name: flags
        in: query
        schema:
          type: array
          items:
            type: string
          nullable: true
      - name: exclude
        in: query
        schema:
          type: array
          items:
            enum:
              - enum1
              - enum2
              - enum space
              - enum-sepcial_CHARS
              - deprecated_enum
            type: string
            x-caffoa-enum-aliases:
              deprecated_enum: enum1
              deprecated_enum2: enum2
          nullable: true
  '/enums/list/filter/{filter}':
    get:
      tags:
        - user
      operationId: listEnums2
      responses:
        '200':
          description: a list of neum
          content:
            application/json: { }
    parameters:
      - name: filter
        in: path
        required: true
        schema:
          enum:
            - enum1
            - enum2
            - enum space
            - enum-sepcial_CHARS
            - deprecated_enum
          type: string
          x-caffoa-enum-aliases:
            deprecated_enum: enum1
            deprecated_enum2: enum2
  /echo/oneOfTest:
    get:
      tags:
        - user
      operationId: EchoOneOf
      requestBody:
        content:
          application/json: { }
      responses:
        '200':
          description: a list of neum
          content:
            application/json: { }
  /echo/oneOfTestArray:
    get:
      tags:
        - user
      operationId: EchoOneOfArray
      requestBody:
        content:
          application/json: { }
      responses:
        '200':
          description: a list of neum
          content:
            application/json: { }
components: { }